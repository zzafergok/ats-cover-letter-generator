'use client'

import React, { useState, useEffect } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { AlertCircle, CheckCircle, Clock, Wand2 } from 'lucide-react'

import { Button } from '@/components/core/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/core/card'
import { Alert, AlertDescription } from '@/components/core/alert'
import { PersonalInfoSection } from '@/components/ui/cv/sections/PersonalInfoSection'
import { ProfessionalSummarySection } from '@/components/ui/cv/sections/ProfessionalSummarySection'
import { WorkExperienceSection } from '@/components/ui/cv/sections/WorkExperienceSection'
import { EducationSection } from '@/components/ui/cv/sections/EducationSection'
import { SkillsSection } from '@/components/ui/cv/sections/SkillsSection'
import { ProfileRedirectAlert } from '@/components/ui/cv/ProfileRedirectAlert'
import { atsCvApi } from '@/lib/api/api'
import { ATSCVGenerateData } from '@/types/api.types'
import { useUserProfileStore } from '@/store/userProfileStore'
import { atsFormSchema, ATSFormData } from '@/types/form.types'

export function ATSCVForm() {
  const { profile, isLoading: profileLoading, getProfile } = useUserProfileStore()
  const [generatedCV, setGeneratedCV] = useState<{
    cvId: string
    fileName: string
    fileSize: number
    downloadUrl: string
    applicantName: string
    targetPosition: string
    createdAt: string
  } | null>(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const [isDownloading, setIsDownloading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue,
    getValues,
  } = useForm<ATSFormData>({
    resolver: zodResolver(atsFormSchema),
    defaultValues: {
      personalInfo: {
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        address: {
          street: '',
          city: '',
          country: '',
        },
        linkedIn: '',
        github: '',
        portfolio: '',
      },
      professionalSummary: {
        summary: '',
        targetPosition: '',
        yearsOfExperience: 0,
        keySkills: ['', '', ''],
      },
      workExperience: [
        {
          id: '',
          companyName: '',
          position: '',
          location: '',
          startDate: '',
          endDate: '',
          isCurrentRole: false,
          achievements: ['', ''],
        },
      ],
      education: [
        {
          id: '',
          institution: '',
          degree: '',
          fieldOfStudy: '',
          location: '',
          startDate: '',
          endDate: '',
        },
      ],
      skills: {
        technical: [
          {
            category: '',
            items: [
              {
                name: '',
                proficiencyLevel: 'Intermediate' as const,
              },
            ],
          },
        ],
        languages: [{ language: '', proficiency: 'Intermediate' }],
        soft: [''],
      },
      configuration: {
        targetCompany: '',
        jobDescription: '',
        language: 'TURKISH' as const,
        cvType: 'ATS_OPTIMIZED' as const,
        templateStyle: 'PROFESSIONAL' as const,
        useAI: false,
      },
      certifications: [],
      projects: [],
    },
  })
  console.log('üöÄ ~ ATSCVForm ~ errors:', errors)

  // Profil verilerini form'a otomatik doldur
  useEffect(() => {
    if (!profile) {
      getProfile()
      return
    }

    // Ki≈üisel bilgileri doldur
    if (profile.firstName) setValue('personalInfo.firstName', profile.firstName)
    if (profile.lastName) setValue('personalInfo.lastName', profile.lastName)
    if (profile.email) setValue('personalInfo.email', profile.email)
    if (profile.phone) setValue('personalInfo.phone', profile.phone)
    if (profile.address) setValue('personalInfo.address.street', profile.address)
    if (profile.city) setValue('personalInfo.address.city', profile.city)
    if (profile.country) setValue('personalInfo.address.country', profile.country)
    if (profile.linkedin) setValue('personalInfo.linkedIn', profile.linkedin)
    if (profile.github) setValue('personalInfo.github', profile.github)
    if (profile.portfolioWebsite) setValue('personalInfo.portfolio', profile.portfolioWebsite)

    // ƒ∞≈ü deneyimlerini doldur
    if (profile.experiences?.length > 0) {
      const formattedExperiences = profile.experiences.map((exp) => ({
        id: exp.id,
        companyName: exp.companyName,
        position: exp.position,
        location: exp.location || '',
        startDate: `${exp.startYear}-${String(exp.startMonth).padStart(2, '0')}-01`,
        endDate: exp.isCurrent ? '' : `${exp.endYear}-${String(exp.endMonth).padStart(2, '0')}-01`,
        isCurrentRole: exp.isCurrent,
        achievements: Array.isArray(exp.achievements) ? exp.achievements : exp.achievements ? [exp.achievements] : [''],
      }))
      setValue('workExperience', formattedExperiences)
    }

    // Eƒüitimleri doldur
    if (profile.educations?.length > 0) {
      const formattedEducations = profile.educations.map((edu) => ({
        id: edu.id,
        institution: edu.schoolName,
        degree: edu.degree || '',
        fieldOfStudy: edu.fieldOfStudy || '',
        location: '',
        startDate: `${edu.startYear}-01-01`,
        endDate: edu.isCurrent ? '' : `${edu.endYear}-12-31`,
      }))
      setValue('education', formattedEducations)
    }

    // Yetenekleri doldur
    if (profile.skills?.length > 0) {
      const technicalSkills = profile.skills.map((skill) => ({
        category: skill.category || 'Genel',
        items: [
          {
            name: skill.name,
            proficiencyLevel: 'Intermediate' as const,
          },
        ],
      }))
      setValue('skills.technical', technicalSkills)
    }
  }, [profile, setValue, getProfile])

  // Profil completeness kontrol√º
  const checkProfileCompleteness = () => {
    const missingFields = []

    if (!profile?.firstName || !profile?.lastName) {
      missingFields.push({ field: 'personalInfo', message: 'Ki≈üisel bilgiler eksik' })
    }

    if (!profile?.experiences?.length) {
      missingFields.push({ field: 'experience', message: 'ƒ∞≈ü deneyimi bilgisi eksik' })
    }

    if (!profile?.educations?.length) {
      missingFields.push({ field: 'education', message: 'Eƒüitim bilgisi eksik' })
    }

    if (!profile?.skills?.length) {
      missingFields.push({ field: 'skills', message: 'Yetenek bilgisi eksik' })
    }

    return missingFields
  }

  const missingProfileFields = checkProfileCompleteness()

  // CV download fonksiyonu
  const handleDownloadCV = async (cvId: string, fileName: string) => {
    setIsDownloading(true)
    try {
      const blob = await atsCvApi.download(cvId)

      // Blob'u dosya olarak indir
      const url = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = fileName
      document.body.appendChild(link)
      link.click()

      // Cleanup
      document.body.removeChild(link)
      window.URL.revokeObjectURL(url)

      console.log('CV ba≈üarƒ±yla indirildi:', fileName)
    } catch (err) {
      console.error('CV indirme hatasƒ±:', err)
      setError('CV indirilirken bir hata olu≈ütu. L√ºtfen tekrar deneyin.')
    } finally {
      setIsDownloading(false)
    }
  }

  const onSubmit = async (data: ATSFormData) => {
    console.log('üöÄ ~ onSubmit ~ data:', data)
    setIsGenerating(true)
    setError(null)

    try {
      const generateData: ATSCVGenerateData = {
        personalInfo: data.personalInfo,
        professionalSummary: data.professionalSummary,
        workExperience: data.workExperience.map((exp) => ({
          ...exp,
          id: exp.id || `work_${Date.now()}_${Math.random()}`,
          technologies: exp.technologies ? [exp.technologies] : undefined,
        })),
        education: data.education.map((edu) => ({
          ...edu,
          id: edu.id || `edu_${Date.now()}_${Math.random()}`,
          honors: edu.honors ? [edu.honors] : undefined,
          relevantCoursework: edu.relevantCoursework ? [edu.relevantCoursework] : undefined,
        })),
        skills: {
          ...data.skills,
          languages: data.skills.languages || [],
        },
        certifications: (data.certifications || []).map((cert) => ({
          ...cert,
          id: cert.id || `cert_${Date.now()}_${Math.random()}`,
          issueDate: cert.issueDate || '',
        })),
        projects: (data.projects || []).map((proj) => ({
          ...proj,
          id: proj.id || `proj_${Date.now()}_${Math.random()}`,
        })),
        configuration: data.configuration,
      }

      const result = await atsCvApi.generate(generateData)

      if (result.success) {
        // CV ba≈üarƒ±yla olu≈üturuldu
        setGeneratedCV({
          cvId: result.data.cvId,
          fileName: result.data.fileName,
          fileSize: result.data.fileSize,
          downloadUrl: result.data.downloadUrl,
          applicantName: result.data.applicantName,
          targetPosition: result.data.targetPosition,
          createdAt: result.data.createdAt,
        })

        // Toast mesajƒ± ekleyebilirsiniz
        console.log('CV ba≈üarƒ±yla olu≈üturuldu:', result.message)
      } else {
        throw new Error(result.message || 'CV olu≈üturulurken beklenmeyen bir hata olu≈ütu')
      }
    } catch (err) {
      console.error('CV olu≈üturma hatasƒ±:', err)

      if (err instanceof Error) {
        setError(err.message)
      } else if (typeof err === 'object' && err !== null && 'message' in err) {
        setError(String(err.message))
      } else {
        setError('CV olu≈üturulurken beklenmeyen bir hata olu≈ütu. L√ºtfen tekrar deneyin.')
      }
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className={`grid gap-4 md:gap-6 ${generatedCV ? 'xl:grid-cols-2' : 'grid-cols-1'}`}>
      {/* Form Section */}
      <div className='space-y-6'>
        {/* Profile Status Alert */}
        {profileLoading ? (
          <Card>
            <CardContent className='pt-6'>
              <div className='flex items-center gap-3'>
                <Clock className='h-5 w-5 animate-spin text-primary' />
                <span>Profil bilgileriniz y√ºkleniyor...</span>
              </div>
            </CardContent>
          </Card>
        ) : null}

        {/* Profile Completeness Alerts */}
        {!profileLoading && missingProfileFields.length > 0 && (
          <div className='space-y-4'>
            {missingProfileFields.map((missing, index) => {
              const alertConfigs = {
                personalInfo: {
                  sectionName: 'Ki≈üisel Bilgiler',
                  description: 'CV olu≈üturmak i√ßin temel ki≈üisel bilgilerinizi profilde tanƒ±mlamanƒ±z gerekiyor.',
                  targetTab: 'overview',
                },
                experience: {
                  sectionName: 'ƒ∞≈ü Deneyimi',
                  description: "Profesyonel deneyimlerinizi profilde ekleyerek CV'nizi g√º√ßlendirebilirsiniz.",
                  targetTab: 'experience',
                },
                education: {
                  sectionName: 'Eƒüitim Bilgileri',
                  description: 'Eƒüitim ge√ßmi≈üinizi profilde tanƒ±mlayarak daha kapsamlƒ± bir CV olu≈üturabilirsiniz.',
                  targetTab: 'education',
                },
                skills: {
                  sectionName: 'Yetenekler',
                  description: "Teknik ve ki≈üisel yeteneklerinizi profilde belirterek CV'nizi √∂ne √ßƒ±karabilirsiniz.",
                  targetTab: 'skills',
                },
              }

              const config = alertConfigs[missing.field as keyof typeof alertConfigs]
              if (!config) return null

              return (
                <ProfileRedirectAlert
                  key={index}
                  sectionName={config.sectionName}
                  description={config.description}
                  targetTab={config.targetTab}
                />
              )
            })}
          </div>
        )}

        <form onSubmit={handleSubmit(onSubmit)} className='space-y-8'>
          <PersonalInfoSection register={register} errors={errors} />

          <ProfessionalSummarySection
            register={register}
            errors={errors}
            watch={watch}
            setValue={setValue}
            getValues={getValues}
          />

          <WorkExperienceSection
            register={register}
            errors={errors}
            watch={watch}
            setValue={setValue}
            getValues={getValues}
          />

          <EducationSection
            register={register}
            errors={errors}
            watch={watch}
            setValue={setValue}
            getValues={getValues}
          />

          <SkillsSection register={register} errors={errors} watch={watch} setValue={setValue} getValues={getValues} />

          {/* Submit Button */}
          <div className='flex justify-end pt-6'>
            <Button type='submit' disabled={isGenerating || missingProfileFields.length > 0} className='min-w-[200px]'>
              {isGenerating ? (
                <>
                  <Clock className='h-4 w-4 mr-2 animate-spin' />
                  CV Olu≈üturuluyor...
                </>
              ) : (
                <>
                  <Wand2 className='h-4 w-4 mr-2' />
                  ATS CV Olu≈ütur
                </>
              )}
            </Button>
          </div>
        </form>

        {/* Error Display */}
        {error && (
          <Alert variant='destructive'>
            <AlertCircle className='h-4 w-4' />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
      </div>

      {/* Generated Content */}
      {generatedCV && (
        <Card className='h-max'>
          <CardHeader>
            <CardTitle className='flex items-center gap-2'>
              <CheckCircle className='h-5 w-5 text-green-500' />
              Olu≈üturulan CV
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className='space-y-4'>
              <div className='grid grid-cols-1 md:grid-cols-2 gap-4 text-sm'>
                <div>
                  <p>
                    <strong>Dosya Adƒ±:</strong> {generatedCV.fileName}
                  </p>
                  <p>
                    <strong>Boyut:</strong> {(generatedCV.fileSize / 1024).toFixed(1)} KB
                  </p>
                </div>
                <div>
                  <p>
                    <strong>Ba≈üvurucu:</strong> {generatedCV.applicantName}
                  </p>
                  <p>
                    <strong>Pozisyon:</strong> {generatedCV.targetPosition}
                  </p>
                </div>
              </div>
              <div className='flex gap-3'>
                <Button
                  onClick={() => handleDownloadCV(generatedCV.cvId, generatedCV.fileName)}
                  disabled={isDownloading}
                >
                  {isDownloading ? (
                    <>
                      <Clock className='h-4 w-4 mr-2 animate-spin' />
                      ƒ∞ndiriliyor...
                    </>
                  ) : (
                    'CV&apos;yi ƒ∞ndir'
                  )}
                </Button>
                <Button
                  variant='outline'
                  onClick={() => {
                    navigator.clipboard.writeText(window.location.origin + generatedCV.downloadUrl)
                    console.log('Download link kopyalandƒ±')
                  }}
                >
                  Linki Kopyala
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
